package Lab9;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Arrays;

public class BoggleWords 
{
	static ArrayList<String> boggleWords = new ArrayList<String>();
	private final static String NAME = "Tyler Sulsenti";
/**
 * finds words in a given string
 * 
 * @param initial the String to search for words in
 * @param substring	- an empty string to start with
 * @throws IOException
 */
	public static void findWords(String initial, String substring) throws IOException
	{
		String nextLine;
		FileReader fileReader = new FileReader("dict.txt");
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		
		//Get the dictionary in an array for easy searching
		ArrayList<String> x = new ArrayList<String>();
		while ((nextLine = bufferedReader.readLine()) != null) 
		{
		  x.add(nextLine);
		}
		String[] dict = listToArray(x);
	
	
		ArrayList<String> potentials = new ArrayList<String>();
		findWordsHelper(initial,substring,potentials);
		String[] toTest = listToArray(potentials);
		toLowerCaseArray(toTest);
		
		
		for(int i = 0; i < toTest.length; i++)
		{
			if(Arrays.binarySearch(dict, toTest[i]) >= 0) //Only add if the word is in the dictionary
			{
				if(!inList(boggleWords, toTest[i]))//and is not already in the list
				{
					boggleWords.add(toTest[i]);
				}
			}
		}
	
		bufferedReader.close();	
	}
	
	/**
	 * Recursively assists in the process of finding word in a string
	 * 
	 * @param s 	the string to search for words in
	 * @param sub	another string, to use to build the words
	 * @param x		an arraylist to add the potential words too
	 */
	private static void findWordsHelper(String s, String sub, ArrayList<String> x)
	{
		x.add(sub);

		if(s.length() == 0)
		{
			//lol
		}
		else
		{
			findWordsHelper(s.substring(1), sub, x);
			findWordsHelper(s.substring(1), sub +  s.substring(0,1), x);
		}
	}
	
	/**
	 * Converts an ArrayList to an array
	 * 
	 * @param x 	the arraylist to convert
	 * @return		and array with the same length and contents of the arraylist
	 */
	private static String[] listToArray(ArrayList<String> x)
	{
		String[] y = new String[x.size()];
		for(int i = 0; i < x.size(); i++)
		{
			y[i] = x.get(i);
		}
		return y;
	}
	
	/**
	 * Converts an array of uppercase Strings to lowercase
	 * 
	 * @param x		the array of strings to covert
	 */
	private static void toLowerCaseArray(String[] x)
	{
		for(int i = 0; i < x.length; i++)
		{
			x[i] = x[i].toLowerCase();
		}
	}
	
	 /**
     * Determines if a given string is already in a given ArrayList
     *
     * @param  myList the list to be scanned
     * @param check the String to look for
     * 
     * @return    true if the string is found in the list. False if its not
     */
	 public static boolean inList(ArrayList<String> myList,String check)
	 {
	   	for(int i = 0; i < myList.size();i++)
	   	{
	   		if(check.equals(myList.get(i)))
	   		{
	   			return true;
	   		}
	   	}
	   	return false;
	 }
	
	 /**
	  * gets the instance variable array list containing the boggle words
	  * 
	  * @return the instance variable boggleWords
	  */
	public ArrayList<String> getBoggleWords()
	{
		return boggleWords;
	}
	
	/**
	 *main function
	 */
	public static void main (String[] args)
	{
		long start = System.nanoTime();
		try {
			findWords("MTENLFEIOEREOHWR","");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		long totalTime = System.nanoTime() - start;
		System.out.println("Time: " + totalTime);
	}
}
