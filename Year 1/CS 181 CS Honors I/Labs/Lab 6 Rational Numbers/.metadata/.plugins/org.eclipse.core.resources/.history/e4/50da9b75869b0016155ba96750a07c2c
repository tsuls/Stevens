package Lab6;

public class Rational extends Number implements Comparable<Rational>
{
	private long numerator;
	private long denominator;

	public final static String NAME = "Tyler Sulsenti";

	public Rational() 
	{
		numerator = 0;
		denominator = 1;
	}

	public Rational(long wholeNum)
	{
		numerator = wholeNum;
		denominator = 1;
	}

	public Rational(long num, long denom)
	{
		numerator = num;
		denominator = denom;
	}

	public long getDenominator() 
	{
		return denominator;
	}

	public long getNumerator() 
	{

		return numerator;
	}

	public String toString()
	{
		return numerator + "/" + denominator;
	}
	
	private void reduceTerms()
	{
		long gcd = computeGCD(numerator,denominator);
		numerator = numerator/gcd;
		denominator = denominator/gcd;
	}
	
	private long computeGCD(long x, long y)
	{
		long gcd;
		x = Math.abs(x);
		y = Math.abs(y);
		
		if(x < y)
		{
			gcd = computeGCD(y,x);
		}
		else
		{
			while(y > 0)
			{
				long z = y;
				y = x % y;
				x = z;
			}
			gcd = x;
		}
		return gcd;	
	}
	

	private long computeLCM(long x, long y)
	{	
		return Math.abs(x*y)/ computeGCD(x,y);		
	}
	
	public Rational mul(long r)
	{
		Rational x =  new Rational((numerator * r), denominator);
		x.reduceTerms();
		return x;
	}
	
	public Rational div(long r)
	{
		Rational x = new Rational(numerator, (denominator * r));
		x.reduceTerms();
		return x;
	}
	
	public Rational getInv()
	{
		Rational x = new Rational(denominator,numerator);
		x.reduceTerms();
		return x;
	}
	
	public Rational add(Rational other)
	{
		long gcd = computeGCD(denominator, other.getDenominator());
		long newNum1 = numerator * gcd;
		long newNum2 = other.getNumerator() * gcd;
		
		return new Rational((newNum1 + newNum2) , gcd);
	}
	
	public Rational sub(Rational other)
	{
		long gcd = computeGCD(denominator, other.getDenominator());
		long newNum1 = numerator * gcd;
		long newNum2 = other.getNumerator() * gcd;
		
		return new Rational((newNum1 - newNum2) , gcd);
	}
	
	public Rational mul(Rational other)
	{
		return new Rational(other.getNumerator() * numerator, other.getDenominator()*denominator);
	}
	
	public Rational div(Rational other)
	{
		return mul(other.getInv());
	}
	
	@Override
	public int compareTo(Rational other)
	{
		if(this.doubleValue() > other.doubleValue())
		{
			return 1;
		}
		else if(this.doubleValue() < other.doubleValue())
		{
			return -1;
		}	
		else
		{
			return 0;
		}
	}

	@Override
	public double doubleValue() 
	{
		return numerator/denominator;
	}
	
	@Override
	public int intValue()
	{
		return (int) (numerator/denominator);
	}
	
	@Override
	public long longValue()
	{
		return (long) (numerator/denominator);
	}
	
	@Override
	public float floatValue()
	{
		return (float) (numerator/denominator);
	}
}
